/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.0/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
plugins {
	id 'java'
	id 'war'
	id 'org.gretty' version '3.0.3'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    implementation 'org.slf4j:slf4j-api:1.7.24'
    implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    // JSTL
    implementation group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.3.1'


    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testImplementation 'junit:junit:4.12'
}

gretty {
    httpPort = 8080
    contextPath = '/'
}

// Javac related task to generate classpath for linter
task generateClasspath {
	description 'Generate classpath file for Javac linter'
	ext.destFile = file("$buildDir/classpath.txt")
	outputs.file destFile
	doLast {
		def classpathString = sourceSets.main.runtimeClasspath.collect{ it.absolutePath }.join(File.pathSeparator)
		if (!destFile.parentFile.exists()) {
			destFile.parentFile.mkdirs()
		}
		assert destFile.parentFile.exists()
		destFile.text = 'export CLASSPATH="' + classpathString + '"'
	}
}
